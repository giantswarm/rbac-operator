{{ if .Values.Installation.V1.GiantSwarm.OIDC.Enabled }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tenant-admin
  labels:
    {{- include "labels.common" . | nindent 4 }}
    giantswarm.io/service-type: "managed"
rules:
- apiGroups:
  - cluster.x-k8s.io
  - infrastructure.giantswarm.io
  resources:
  - clusters
  - machinedeployments
  - awsclusters
  - awsmachinedeployments
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - application.giantswarm.io
  resources:
  - appcatalogs
  - apps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
# cluster CRs access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tenant-admin
  labels:
    {{- include "labels.common" . | nindent 4 }}
    giantswarm.io/service-type: "managed"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tenant-admin
subjects:
- kind: Group
  name: {{ .Values.Installation.V1.Kubernetes.Auth.TenantAdminTargetGroup }}
---
# access to manage RBAC
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tenant-admin-manage-rbac
  labels:
    {{- include "labels.common" . | nindent 4 }}
    giantswarm.io/service-type: "managed"
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  - clusterrolebindings
  - roles
  - rolebindings
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tenant-admin-manage-rbac
  labels:
    {{- include "labels.common" . | nindent 4 }}
    giantswarm.io/service-type: "managed"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tenant-admin-manage-rbac
subjects:
- kind: Group
  name: {{ .Values.Installation.V1.Kubernetes.Auth.TenantAdminTargetGroup }}
---
# view-all access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tenant-admin-view-all
  labels:
    {{- include "labels.common" . | nindent 4 }}
    giantswarm.io/service-type: "managed"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view-all
subjects:
- kind: Group
  name: {{ .Values.Installation.V1.Kubernetes.Auth.TenantAdminTargetGroup }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: automation
  namespace: global
---
# `global` namespace admin
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tenant-admin-namespace-global
  namespace: global
  labels:
    {{- include "labels.common" . | nindent 4 }}
    giantswarm.io/service-type: "managed"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: Group
  name: {{ .Values.Installation.V1.Kubernetes.Auth.TenantAdminTargetGroup }}
---
# `default` namespace admin
# this will be removed after cluster CRs are created in organization namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tenant-admin-namespace-default
  namespace: default
  labels:
    {{- include "labels.common" . | nindent 4 }}
    giantswarm.io/service-type: "managed"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: Group
  name: {{ .Values.Installation.V1.Kubernetes.Auth.TenantAdminTargetGroup }}
{{ end }}
